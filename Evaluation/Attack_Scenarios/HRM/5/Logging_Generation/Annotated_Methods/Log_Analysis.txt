Methods:
1.- call(model.UserLevel model.UserDatabase.getUserLevel(..))|| => 2 Occurrences
2.- call(void controller.UserController.save(..))|| => 2 Occurrences
3.- call(void model.UserDatabase.save(..))|| => 1 Occurrences
4.- call(void controller.TravelRequestController.save(..))|| => 2 Occurrences
5.- call(void model.TravelRequestDatabase.save(..)); => 1 Occurrence


Annotations:
Admin,UserLevel,=,Admin;
ReturnType,2,model.UserDatabase.getUserLevel,model.UserDatabase,getUserLevel,model.UserLevel = Employee,UserLevel,=,Employee;
Method,3,controller.UserController.save,controller.UserController,save,Method = controller.UserController.save,Method,=,controller.UserController.save;
Parameter,4,model.UserDatabase.save,model.UserDatabase,save,model.User.user.userLevel = Employee,userLevel,=,Employee;
Method,5,controller.TravelRequestController.save,controller.TravelRequestController,save,Method = controller.TravelRequestController.save,Method,=,controller.TravelRequestController.save;
Parameter,6,model.TravelRequestDatabase.save,model.TravelRequestDatabase,save,model.TravelRequest.travelRequest.status = Pending,status,=,Pending;


1.- The model.UserLevel model.UserDatabase.getUserLevel method is included in the security log 2 times. These times corresponds when during the attack scenario a System Administrator connects to the HRM software system or a System Administrator misused the credentials of an employee and connected like a "Fake" Employee to the HRM software system.
2.- The controller.UserController.save method is included 2 times in the security log. These times corresponds when during the attack scenario an employee is modified either with a Userl Level equal to Employee or Manager. This is correct because we indicated to include this method in the log to know the details of the employee such as Employee Id and Employee Name that were modified.
3.- The model.UserDatabase.save method is included 1 time in the security log. This is the moment when during the attack scenario the security incident really happened because an Employee with a User Level equal to Employee was modified and we recorded the evidence. 
4.- The controller.TravelRequestController.save method is included 2 times in the security log. These times corresponds when during the attack scenario A travel request was rejected or created. This is correct because we indicated to include this method in the log to know the details of the travel request such as travel request id and employee name that was either created or modified.
5.- The model.TravelRequestDatabase.save method is included 1 time in the security log. This is the moment when during the attack scenario the security incident really happened because a travel request was created by a fake employee and we recorded the evidence. 