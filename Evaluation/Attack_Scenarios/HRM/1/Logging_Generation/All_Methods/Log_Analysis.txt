1.- call(boolean controller.UserController.validateUser(..))|| => 2 Ocurrences
call(boolean model.UserDatabase.validateUser(..))|| => 2 Ocurrences
call(model.UserLevel controller.UserController.getUserLevel(..))|| => 2 Ocurrences
call(model.UserLevel model.UserDatabase.getUserLevel(..))|| => 2 Ocurrences

2.- call(void controller.ModuleController.saveModules(..))|| => 20 Ocurrences
call(void model.ModuleDatabase.saveModules(..))|| => 20 Ocurrences
call(java.lang.String[] controller.ModuleController.getModules(..))|| => 20 Ocurrences
call(java.lang.String[] model.ModuleDatabase.getModules(..))|| => 20 Ocurrences
call(java.lang.String[][] controller.ModuleController.getSubModules(..))|| => 20 Ocurrences
call(java.lang.String[][] model.ModuleDatabase.getSubModules(..))|| => 20 Ocurrences

3.- call(ArrayList<model.Employee> controller.TravelRequestController.loadFullNameEmployees(..))|| => 33 Ocurrences
call(ArrayList<model.Employee> model.TravelRequestDatabase.loadFullNameEmployees(..))|| => 33 Ocurrences
call(int controller.TravelRequestController.maxNumTravelRequest(..))|| => 33 Ocurrences
call(int model.TravelRequestDatabase.maxNumTravelRequest(..))|| => 33 Ocurrences

4.- call(void controller.TravelRequestController.load(..))|| => 16 Ocurrences
call(void model.TravelRequestDatabase.load(..))|| => 16 Ocurrences

5.- call(void controller.TravelRequestController.save(..))|| => 4 Ocurrences
call(void model.TravelRequestDatabase.save(..))|| => 4 Ocurrences

6.- call(ArrayList<model.Employee> controller.UserController.loadFullNameEmployees(..))|| => 24 Ocurrences
call(ArrayList<model.Employee> model.UserDatabase.loadFullNameEmployees(..))|| 24 Ocurrences

7.- call(void controller.UserController.load(..))|| => 13 Ocurrences
call(void model.UserDatabase.load(..))|| => 13 Ocurrences

8.- call(boolean controller.UserController.validateEmployee(..))|| => 8 Ocurrences
call(boolean model.UserDatabase.validateEmployee(..))|| => 8 Ocurrences
call(boolean controller.UserController.validateUserName(..))|| => 8 Ocurrences
call(boolean model.UserDatabase.validateUserName(..))|| => 8 Ocurrences
call(boolean controller.UserController.validateEmail(..))|| => 8 Ocurrences
call(boolean model.UserDatabase.validateEmail(..))|| => 8 Ocurrences

9.- call(void controller.UserController.save(..))|| => 6 Ocurrences
call(void model.UserDatabase.save(..)); 6 Ocurrences


1.- The controller.UserController.validateUser and model.UserDatabase.validateUser methods are included in the security log 2 times. 
These times corresponds when during the attack scenario: a) The First time when Henry Smith connected to the HRM software system. 
b) The Second time, when the “fake” Arthur Jones connected to the HRM software system. 
The controller.UserController.getUserLevel and model.UserDatabase.getUserLevel are included in the security log 2 times.
These times corresponds: a) First time when the User: Henry Smith with the role of Administrator connected to the HRM software system. 
b) When the “fake” Arthur Jones with the role of Manager connected to the HRM software system. 

2.- The controller.ModuleController.saveModules, model.ModuleDatabase.saveModules, controller.ModuleController.getModules, model.ModuleDatabase.getModules, controller.ModuleController.getSubModules, model.ModuleDatabase.getSubModules are included in the security log 20 times. 
These times corresponds, when the Users: either Henry or Arthur accessed to the main screen in the HRM called: “Human Resources Management System Menu”. In this moment, the HRM software system prepares the general menu which contains the modules and submodules that a User connected in the HRM can access is generated and displayed.

3.- The controller.TravelRequestController.loadFullNameEmployees, model.TravelRequestDatabase.loadFullNameEmployees, controller.TravelRequestController.maxNumTravelRequest and model.TravelRequestDatabase.maxNumTravelRequest methods are included in the security log 33 times. These times corresponds when the Travel Requests Main Menu HRM is generated and it is being displayed the list of the current Travel Requests in the HRM.

4.- The controller.TravelRequestController.load, model.TravelRequestDatabase.load and controller.TravelRequestController.save are included in the security log 16 times. These times corresponds when the HRM software system read the details of the Travel Request.

5.- The controller.TravelRequestController.save and model.TravelRequestDatabase.save are included in the security log 4 times. These times corresponds when during the attack scenario a Travel Request has been either created, modified, approved or rejected in the HRM software system.

6.- The controller.UserController.loadFullNameEmployees and model.UserDatabase.loadFullNameEmployees are included in the security log 24 times. These times corresponds when 
the HRM software system read the complete name of an Employee to present it on the screen.

7.- The controller.UserController.load and the model.UserDatabase.load methods are included in the security log 13 times. These times corresponds when the HRM software system read the details of the User.

8.- The controller.UserController.validateEmployee, model.UserDatabase.validateEmployee, controller.UserController.validateUserName, model.UserDatabase.validateUserName, controller.UserController.validateEmail, model.UserDatabase.validateEmail methods are included in the security log 8 times. These times corresponds when during the attack scenario an User was modified and these method validated if the UserName or email was correct.

9.- The void controller.UserController.save and model.UserDatabase.save methods are included in the security log 6 times. These times corresponds when during the attack scenario an User was modified and these methods stored in the database the information.