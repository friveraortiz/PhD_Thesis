Methods:

1.- call(boolean controller.UserController.validateUser(..))|| => 2 Ocurrences
call(boolean model.UserDatabase.validateUser(..))|| => 2 Ocurrences
call(model.UserLevel controller.UserController.getUserLevel(..))|| => 2 Ocurrences
call(model.UserLevel model.UserDatabase.getUserLevel(..))|| => 2 Ocurrences

2.- call(void controller.ModuleController.saveModules(..))|| => 20 Ocurrences
call(void model.ModuleDatabase.saveModules(..))|| => 20 Ocurrences
call(java.lang.String[] controller.ModuleController.getModules(..))|| => 20 Ocurrences
call(java.lang.String[] model.ModuleDatabase.getModules(..))|| => 20 Ocurrences
call(java.lang.String[][] controller.ModuleController.getSubModules(..))|| => 20 Ocurrences
call(java.lang.String[][] model.ModuleDatabase.getSubModules(..))|| => 20 Ocurrences

3.- call(ArrayList<model.Employee> controller.TravelRequestController.loadFullNameEmployees(..))|| => 33 Ocurrences
call(ArrayList<model.Employee> model.TravelRequestDatabase.loadFullNameEmployees(..))|| => 33 Ocurrences
call(int controller.TravelRequestController.maxNumTravelRequest(..))|| => 33 Ocurrences
call(int model.TravelRequestDatabase.maxNumTravelRequest(..))|| => 33 Ocurrences

4.- call(void controller.TravelRequestController.load(..))|| => 16 Ocurrences
call(void model.TravelRequestDatabase.load(..))|| => 16 Ocurrences

5.- call(void controller.TravelRequestController.save(..))|| => 4 Ocurrences
call(void model.TravelRequestDatabase.save(..))|| => 4 Ocurrences

6.- call(ArrayList<model.Employee> controller.UserController.loadFullNameEmployees(..))|| => 24 Ocurrences
call(ArrayList<model.Employee> model.UserDatabase.loadFullNameEmployees(..))|| 24 Ocurrences

7.- call(void controller.UserController.load(..))|| => 13 Ocurrences
call(void model.UserDatabase.load(..))|| => 13 Ocurrences

8.- call(boolean controller.UserController.validateEmployee(..))|| => 8 Ocurrences
call(boolean model.UserDatabase.validateEmployee(..))|| => 8 Ocurrences
call(boolean controller.UserController.validateUserName(..))|| => 8 Ocurrences
call(boolean model.UserDatabase.validateUserName(..))|| => 8 Ocurrences
call(boolean controller.UserController.validateEmail(..))|| => 8 Ocurrences
call(boolean model.UserDatabase.validateEmail(..))|| => 8 Ocurrences

9.- call(void controller.UserController.save(..))|| => 6 Ocurrences
call(void model.UserDatabase.save(..)); 6 Ocurrences


Annotations:
Method,1,controller.UserController.validateUser,controller.UserController,validateUser,Method = controller.UserController.validateUser,Method,=,controller.UserController.validateUser;
Method,2,model.UserDatabase.validateUser,model.UserDatabase,validateUser,Method = model.UserDatabase.validateUser,Method,=,model.UserDatabase.validateUser;
Method,3,controller.UserController.getUserLevel,controller.UserController,getUserLevel,Method = controller.UserController.getUserLevel,Method,=,controller.UserController.getUserLevel;
Method,4,model.UserDatabase.getUserLevel,model.UserDatabase,getUserLevel,Method = model.UserDatabase.getUserLevel,Method,=,model.UserDatabase.getUserLevel;
Method,5,controller.ModuleController.saveModules,controller.ModuleController,saveModules,Method = controller.ModuleController.saveModules,Method,=,controller.ModuleController.saveModules;
Method,6,model.ModuleDatabase.saveModules,model.ModuleDatabase,saveModules,Method = model.ModuleDatabase.saveModules,Method,=,model.ModuleDatabase.saveModules;
Method,7,controller.ModuleController.getModules,controller.ModuleController,getModules,Method = controller.ModuleController.getModules,Method,=,controller.ModuleController.getModules;
Method,8,model.ModuleDatabase.getModules,model.ModuleDatabase,getModules,Method = model.ModuleDatabase.getModules,Method,=,model.ModuleDatabase.getModules;
Method,9,controller.ModuleController.getSubModules,controller.ModuleController,getSubModules,Method = controller.ModuleController.getSubModules,Method,=,controller.ModuleController.getSubModules;
Method,10,model.ModuleDatabase.getSubModules,model.ModuleDatabase,getSubModules,Method = model.ModuleDatabase.getSubModules,Method,=,model.ModuleDatabase.getSubModules;
Method,11,controller.TravelRequestController.loadFullNameEmployees,controller.TravelRequestController,loadFullNameEmployees,Method = controller.TravelRequestController.loadFullNameEmployees,Method,=,controller.TravelRequestController.loadFullNameEmployees;
Method,12,model.TravelRequestDatabase.loadFullNameEmployees,model.TravelRequestDatabase,loadFullNameEmployees,Method = model.TravelRequestDatabase.loadFullNameEmployees,Method,=,model.TravelRequestDatabase.loadFullNameEmployees;
Method,13,controller.TravelRequestController.maxNumTravelRequest,controller.TravelRequestController,maxNumTravelRequest,Method = controller.TravelRequestController.maxNumTravelRequest,Method,=,controller.TravelRequestController.maxNumTravelRequest;
Method,14,model.TravelRequestDatabase.maxNumTravelRequest,model.TravelRequestDatabase,maxNumTravelRequest,Method = model.TravelRequestDatabase.maxNumTravelRequest,Method,=,model.TravelRequestDatabase.maxNumTravelRequest;
Method,15,controller.TravelRequestController.load,controller.TravelRequestController,load,Method = controller.TravelRequestController.load,Method,=,controller.TravelRequestController.load;
Method,16,model.TravelRequestDatabase.load,model.TravelRequestDatabase,load,Method = model.TravelRequestDatabase.load,Method,=,model.TravelRequestDatabase.load;
Method,17,controller.TravelRequestController.save,controller.TravelRequestController,save,Method = controller.TravelRequestController.save,Method,=,controller.TravelRequestController.save;
Method,18,model.TravelRequestDatabase.save,model.TravelRequestDatabase,save,Method = model.TravelRequestDatabase.save,Method,=,model.TravelRequestDatabase.save;
Method,19,controller.UserController.loadFullNameEmployees,controller.UserController,loadFullNameEmployees,Method = controller.UserController.loadFullNameEmployees,Method,=,controller.UserController.loadFullNameEmployees;
Method,20,model.UserDatabase.loadFullNameEmployees,model.UserDatabase,loadFullNameEmployees,Method = model.UserDatabase.loadFullNameEmployees,Method,=,model.UserDatabase.loadFullNameEmployees;
Method,21,controller.UserController.load,controller.UserController,load,Method = controller.UserController.load,Method,=,controller.UserController.load;
Method,22,model.UserDatabase.load,model.UserDatabase,load,Method = model.UserDatabase.load,Method,=,model.UserDatabase.load;
Method,23,controller.UserController.validateEmployee,controller.UserController,validateEmployee,Method = controller.UserController.validateEmployee,Method,=,controller.UserController.validateEmployee;
Method,24,model.UserDatabase.validateEmployee,model.UserDatabase,validateEmployee,Method = model.UserDatabase.validateEmployee,Method,=,model.UserDatabase.validateEmployee;
Method,25,controller.UserController.validateUserName,controller.UserController,validateUserName,Method = controller.UserController.validateUserName,Method,=,controller.UserController.validateUserName;
Method,26,model.UserDatabase.validateUserName,model.UserDatabase,validateUserName,Method = model.UserDatabase.validateUserName,Method,=,model.UserDatabase.validateUserName;
Method,27,controller.UserController.validateEmail,controller.UserController,validateEmail,Method = controller.UserController.validateEmail,Method,=,controller.UserController.validateEmail;
Method,28,model.UserDatabase.validateEmail,model.UserDatabase,validateEmail,Method = model.UserDatabase.validateEmail,Method,=,model.UserDatabase.validateEmail;
Method,29,controller.UserController.save,controller.UserController,save,Method = controller.UserController.save,Method,=,controller.UserController.save;
Method,30,model.UserDatabase.save,model.UserDatabase,save,Method = model.UserDatabase.save,Method,=,model.UserDatabase.save;


1.- The controller.UserController.validateUser and model.UserDatabase.validateUser methods are included in the security log 2 times. 
These times corresponds when during the attack scenario: A System Administrator connected to the HRM software system or the “fake” Arthur Jones connected to the HRM software system. 
The controller.UserController.getUserLevel and model.UserDatabase.getUserLevel are included in the security log 2 times.
These times corresponds when the System Administrator connected to the HRM software system or when the “fake” Arthur Jones with the role of Manager connected to the HRM software system. 

2.- The controller.ModuleController.saveModules, model.ModuleDatabase.saveModules, controller.ModuleController.getModules, model.ModuleDatabase.getModules, controller.ModuleController.getSubModules, model.ModuleDatabase.getSubModules methods are included in the security log 20 times.  These times corresponds, when the System Administrator or the fake Manager accessed to the main screen in the HRM called: “Human Resources Management System Menu”. In this moment, the HRM software system prepared the general menu which contains the modules and submodules that a User could accessed in the HRM software system and displayed them.

3.- The controller.TravelRequestController.loadFullNameEmployees, model.TravelRequestDatabase.loadFullNameEmployees, controller.TravelRequestController.maxNumTravelRequest and model.TravelRequestDatabase.maxNumTravelRequest methods are included in the security log 33 times. These times corresponds when the Travel Requests Main Menu HRM was generated and it was displayed the list of the current Travel Requests in the HRM.

4.- The controller.TravelRequestController.load, model.TravelRequestDatabase.load and controller.TravelRequestController.save methods are included in the security log 16 times. These times corresponds when the HRM software system read the details of the Travel Requests.

5.- The controller.TravelRequestController.save and model.TravelRequestDatabase.save methods are included in the security log 4 times. These times corresponds when during the attack scenario a Travel Request was created, modified, approved or rejected in the HRM software system.

6.- The controller.UserController.loadFullNameEmployees and model.UserDatabase.loadFullNameEmployees methods are included in the security log 24 times. These times corresponds when 
the HRM software system read the complete name of an Employee to load HRM it on the Employees Main Menu HRM.

7.- The controller.UserController.load and the model.UserDatabase.load methods are included in the security log 13 times. These times corresponds when the HRM software system read the details of the User.

8.- The controller.UserController.validateEmployee, model.UserDatabase.validateEmployee, controller.UserController.validateUserName, model.UserDatabase.validateUserName, controller.UserController.validateEmail, model.UserDatabase.validateEmail methods are included in the security log 8 times. These times corresponds when during the attack scenario an User was modified and these method validated if the UserName or email were correct.

9.- The void controller.UserController.save and model.UserDatabase.save methods are included in the security log 6 times. These times corresponds when during the attack scenario an User was modified. This is the moment when the security incident happened and we recorded the evidence.